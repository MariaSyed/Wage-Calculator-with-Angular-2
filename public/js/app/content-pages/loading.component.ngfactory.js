/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/linker/element';
import * as import3 from './loading.component';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/change_detection';
import * as import8 from '@angular/core/src/metadata/view';
import * as import9 from '@angular/core/src/linker/component_factory';
var renderType_LoadingIndicator_Host = null;
var _View_LoadingIndicator_Host0 = (function (_super) {
    __extends(_View_LoadingIndicator_Host0, _super);
    function _View_LoadingIndicator_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_LoadingIndicator_Host0, renderType_LoadingIndicator_Host, import6.ViewType.HOST, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_LoadingIndicator_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.selectOrCreateHostElement('loading-indicator', rootSelector, null);
        this._appEl_0 = new import2.AppElement(0, null, this, this._el_0);
        var compView_0 = viewFactory_LoadingIndicator0(this.viewUtils, this.injector(0), this._appEl_0);
        this._LoadingIndicator_0_4 = new import3.LoadingIndicator();
        this._appEl_0.initComponent(this._LoadingIndicator_0_4, [], compView_0);
        compView_0.create(this._LoadingIndicator_0_4, this.projectableNodes, null);
        this.init([].concat([this._el_0]), [this._el_0], [], []);
        return this._appEl_0;
    };
    _View_LoadingIndicator_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import3.LoadingIndicator) && (0 === requestNodeIndex))) {
            return this._LoadingIndicator_0_4;
        }
        return notFoundResult;
    };
    return _View_LoadingIndicator_Host0;
}(import1.AppView));
function viewFactory_LoadingIndicator_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_LoadingIndicator_Host === null)) {
        (renderType_LoadingIndicator_Host = viewUtils.createRenderComponentType('', 0, import8.ViewEncapsulation.None, [], {}));
    }
    return new _View_LoadingIndicator_Host0(viewUtils, parentInjector, declarationEl);
}
export var LoadingIndicatorNgFactory = new import9.ComponentFactory('loading-indicator', viewFactory_LoadingIndicator_Host0, import3.LoadingIndicator);
var styles_LoadingIndicator = [];
var renderType_LoadingIndicator = null;
var _View_LoadingIndicator0 = (function (_super) {
    __extends(_View_LoadingIndicator0, _super);
    function _View_LoadingIndicator0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_LoadingIndicator0, renderType_LoadingIndicator, import6.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_LoadingIndicator0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this._el_0 = this.renderer.createElement(parentRenderNode, 'div', null);
        this.renderer.setElementAttribute(this._el_0, 'class', 'loader loader-small');
        this.init([], [this._el_0], [], []);
        return null;
    };
    return _View_LoadingIndicator0;
}(import1.AppView));
export function viewFactory_LoadingIndicator0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_LoadingIndicator === null)) {
        (renderType_LoadingIndicator = viewUtils.createRenderComponentType('C:/Users/Maria_2/Documents/WageCalulator/wc-from-scratch/assets/app/content-pages/loading.component.ts class LoadingIndicator - inline template', 0, import8.ViewEncapsulation.None, styles_LoadingIndicator, {}));
    }
    return new _View_LoadingIndicator0(viewUtils, parentInjector, declarationEl);
}
//# sourceMappingURL=loading.component.ngfactory.js.map